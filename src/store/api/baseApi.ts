import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type {
   BaseQueryFn,
   FetchArgs,
   FetchBaseQueryError,
} from '@reduxjs/toolkit/query'

import type { RootState } from '../store'

const baseQuery = fetchBaseQuery({
   baseUrl: import.meta.env.VITE_BASE_API_URL,
   prepareHeaders: (headers, { getState }) => {
      const token = (getState() as RootState).auth.token

      if (token) {
         headers.set('authorization', `Bearer ${token}`)
         headers.set('Accept', 'application/json')
      }
      return headers
   },
})

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º `baseQuery` –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 401 Unauthorized)
const baseQueryWithInterceptor: BaseQueryFn<
   string | FetchArgs,
   unknown,
   FetchBaseQueryError
> = async (args, api, extraOptions) => {
   const result = await baseQuery(args, api, extraOptions)

   if (result.error && result.error.status === 401) {
      console.warn('–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.')
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω–∞
   } else if (result.error && result.error.status === 403) {
      console.warn('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!')
   } else if (result.error && result.error.status === 404) {
      console.warn('üîç –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
   } else if (result.error && result.error.status === 500) {
      console.warn('üî• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
   }
   return result
}

export const baseApi = createApi({
   reducerPath: 'baseApi',
   baseQuery: baseQueryWithInterceptor,
   tagTypes: ['Users'], // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–Ω–µ–º —Ñ–æ–Ω–µ
   endpoints: () => ({}),
})
